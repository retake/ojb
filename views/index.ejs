<!DOCTYPE html>
<script src="/socket.io/socket.io.js"></script>
<html>
  <head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script type="text/javascript" src='./javascripts/tools.js' ></script>
  </head>
  <body>
    <div id="dropzone">
      <div id='dropzone_caption'><font size=32 color="white">追加したいファイルをドロップ</font></div>
      <div id='upload_status_view'></div>
      <div id='upload_fails'></div>
    </div>
    <br>
    <div id="name"></div>
    <br>
    <div id='dataarea'></div>
      <div id="playinginfo"></div><div id='vdown'>↓</div><div id='vup'>↑</div>
    <br>
    <div id='mainarea'>
      <div id="playlist"></div>
      <video id='media'></video>
    </div>
    <br>
    <div id="userlist"></div>
    <br>
    <input type="text" id="newname" />
    <input type="button" id="changename" value="名前を変更" />
    <input type="button"  id="disconnect_btn" value="切断" />
    <input type="button"  id="reconnect_btn" value="再接続" />
  </body>
</html>



<script type="text/javascript">

// 即時関数内で実行
(function(){


  // 変数宣言
  var uploading_flg = false;
  var upload_que = [];
  var slice_uploading_flg = false;
  var slice_que = [];
  var slice_size = 1024000;
  //var slice_size = 409600;
  var slices = [];

  var queTimer = null;
  var sliceUploadTimer = null;

  var sendCurrentTimeTimer = null;

  var sessid = null; 
  var playlist = [];
  var userlist = [];
  var playing_file_info = "";

  var audio_mime_types = getAudioMimeTypes();
  var video_mime_types = getVideoMimeTypes();
  var mime_types = audio_mime_types.concat(video_mime_types);

  // websocket接続開始
  var address = '<%=conf.host%>:<%=conf.port%>';
  var socket = io.connect(address);

  // mediaの初期化
  var media = document.getElementById("media");
  media.style.display = "none";
  media.preload = 'metadata';
  media.addEventListener("ended", function(e){
    media.style.display = "none";
    if (playlist[0].sessid == sessid && playing_file_info=='player'){
      sendCurrentTimeTimer.stop();
      socket.emit('<%=conf.soc_msgs.playend%>', playlist[0]);
    }
  },false);
  media.addEventListener("loadedmetadata", function(e){
    if (playlist[0].sessid == sessid){
      playing_file_info = 'player';
      sendCurrentTimeTimer.start();
      mediastart();
    } else {
      playing_file_info = 'listener';
      socket.emit('<%=conf.soc_msgs.getcurrenttime%>',{});
    }
    console.log(playing_file_info);
  }, false);


  // mediaコントロール
  var vdown = document.getElementById('vdown');
  var vup = document.getElementById('vup');

  vdown.addEventListener('click',function(e){
    var currentVolume = media.volume;
    targetVolume = currentVolume - 0.05;
    if (targetVolume < 0){
      targetVolume = 0;
    }
    media.volume = targetVolume;;
  },false);

  vup.addEventListener('click',function(e){
    var currentVolume = media.volume;
    targetVolume = currentVolume + 0.05;
    if (targetVolume > 1){
      targetVolume = 1;
    }
    media.volume = targetVolume;;
  },false);


   // 接続開始完了時の処理
  socket.on('<%=conf.soc_msgs.conn%>', function(msg) {
    console.log('<%=conf.soc_msgs.conn%>');
    sessid = socket.socket.transport.sessid;
    document.getElementById("name").value = sessid;
 
    //buttonの初期化
    document.getElementById('disconnect_btn').style.display = "";
    document.getElementById('reconnect_btn').style.display = "none";
  });

  // メディア再生処理
  function mediastart(){
    var filetype = playlist[0].filetype;
    for ( var mimetype in audio_mime_types){
      if ( filetype == mimetype ) {
        media.style.display = "none";
      } else if ( filetype == 'video/mp4' ){
        media.style.display = "";
      }
    }
    media.play();
  }

  // メディア停止処理
  function mediastop(){
    media.style.display = "none";
    media.pause();
  }

  // 画面更新時の処理
  window.onbeforeunload = function(){
    disConnect();
  }

  // 切断時の処理
  function disConnect() {
    var yourname = getDispName(sessid);
    document.getElementById('name').innerHTML = '<font color=\'red\'><b>'+yourname+'</b></font> は死んでしまった！';
    if(media!=undefined && media.ended==false){
      mediastop();
    }
    socket.disconnect({sessid:sessid});
    document.getElementById('disconnect_btn').style.display = "none";
    document.getElementById('reconnect_btn').style.display = "";
  }

  // 再接続時の処理
  function reConnect() {
   document.getElementById('disconnect_btn').style.display = "";
   document.getElementById('reconnect_btn').style.display = "none";
   // 再接続は、１度作ったsocketから行う。何故かは不明。
   socket.socket.connect(address);
  }

 // 再生停止通知受信時の処理
  socket.on('<%=conf.soc_msgs.playstop%>', function(data) {
    console.log('<%=conf.soc_msgs.playstop%>');
    mediastop();
  });

  // 再生開始時の処理
  socket.on('<%=conf.soc_msgs.playstart%>', function(startTime) {
    console.log('<%=conf.soc_msgs.playstart%>');
    media.src = './mediadata/'+playlist[0].filename;
    mediastart();
  });

  // 最新再生時刻受信時
  socket.on('<%=conf.soc_msgs.retcurrenttime%>', function(data) {
    console.log('<%=conf.soc_msgs.retcurrenttime%>');
    media.currentTime = data;
    mediastart();
  });

  // プレイリスト更新通知受信時の処理
  socket.on('<%=conf.soc_msgs.updateplaylist%>', function(data) {
    console.log('<%=conf.soc_msgs.updateplaylist%>');
    playlist = data;
    createPlayListTable();
    createUserListTable();
  });

  // プレイリストテーブル最新化
  function createPlayListTable(){
    var playlist_elm = document.getElementById("playlist");
    var playlist_str = "";
    var filename = null;
    var color = null;
    var btn_sts = "";
    var playinfo_elm = document.getElementById('playinginfo');
    playinfo_elm.innerHTML = "";
    playlist_str = '<table>';
    playlist_str = playlist_str.concat('<caption>プレイリスト</caption>');
    playlist_str = playlist_str.concat('<tr>');
    playlist_str = playlist_str.concat('<th class=\'no\'>no</th>');
    playlist_str = playlist_str.concat('<th class=\'id\'>ID/name</th>');
    playlist_str = playlist_str.concat('<th class=\'filename\'>filename</th>');
    playlist_str = playlist_str.concat('<th class=\'remove\'>remove</th>');
    playlist_str = playlist_str.concat('</tr>');
    if (playlist.length>0) {
      for (var i=0; i<playlist.length; i++){
        var trclass = "";
        filename = playlist[i].filename;
        if (sessid == playlist[i].sessid) {
          trclass = "mydata";
          btn_sts = "";
        } else {
          trclass = "otherdata";
          btn_sts = "disabled";
        }
        if (i==0){
          playinfo_elm.innerHTML = '再生中: <b>' + filename + '</b>';
        }
        playlist_str = playlist_str.concat('<tr class='+trclass+'>');
        playlist_str = playlist_str.concat('<td class=\'no\'>'+(i+1)+'</td>');
        playlist_str = playlist_str.concat('<td class=\'id\'>'+getDispName(playlist[i].sessid)+'</td>');
        playlist_str = playlist_str.concat('<td class=\'file\'>'+filename+'</td>');
        playlist_str = playlist_str.concat('<td class=\'remove\'><input id="playno'+i+'" type=button value=\'削除\' '+btn_sts+'/></td>');
        playlist_str = playlist_str.concat('</tr>');
      } 
    } else {
      playlist_str = playlist_str.concat('<tr class="nofiletr">');
      playlist_str = playlist_str.concat('<td colspan="4">nofile</th>');
      playlist_str = playlist_str.concat('</tr>');
    }
    playlist_str = playlist_str.concat('</table>');
    playlist_elm.innerHTML = playlist_str;

    for (var i=0; i<playlist.length; i++){
      var remove_elm = document.getElementById('playno'+i);
      if (!remove_elm.disabled){
        remove_elm.addEventListener("click",function(e){removefile(e.target.id);},false);
      }
    }

  }

  // ユーザーリストテーブル最新化
  function createUserListTable(){
    var userlist_elm = document.getElementById('userlist');
    var userlist_str = "";
    if (userlist.length>0) {
      userlist_str = '<table>';
      userlist_str = userlist_str.concat('<caption>接続ユーザリスト<caption>');
      userlist_str = userlist_str.concat('<tr>');
      userlist_str = userlist_str.concat('<th class=\'no\'>no</th>');
      userlist_str = userlist_str.concat('<th class=\'id\'>ID/name</th>');
      userlist_str = userlist_str.concat('</tr>');
      for (var i=0; i<userlist.length; i++){
        var trclass = "";
        var username = userlist[i].dispname;
        if (sessid == userlist[i].sessid) {
          trclass = "mydata";
        } else {
          trclass = "otherdata";
        }
        userlist_str = userlist_str.concat('<tr class="'+trclass+'">');
        userlist_str = userlist_str.concat('<td class=\'no\'>'+(i+1)+'</td>');
        userlist_str = userlist_str.concat('<td class=\'id\'>'+username+'</td>');
        userlist_str = userlist_str.concat('</tr>');
      } 
      userlist_str = userlist_str.concat('</table>');
    }
    userlist_elm.innerHTML = userlist_str;
  }

  // ユーザーリスト受信時の処理
  socket.on('<%=conf.soc_msgs.updateuserlist%>',function(newuserlist){
    userlist = newuserlist;
    var yourname = getDispName(sessid);
    document.getElementById('name').innerHTML = 'よくぞまいった <font color=\'red\'><b>'+yourname+'</b></font> よ！';
    createPlayListTable();
    createUserListTable();
  });

  // セッションIDから表示名を取得
  function getDispName(srcid){
    var dispname = "";
    for (var i=0; i<userlist.length; i++){
      if (srcid == userlist[i].sessid){
        dispname = userlist[i].dispname;
        break;
      }
    }
    return dispname;
  }

  // ファイル削除通知送信
  function removefile(fileid) {
    fileno = fileid.match(/\d+$/);
    socket.emit('<%=conf.soc_msgs.removefile%>',{filename:playlist[fileno].filename});
  }

  // ファイル送信
  function SendFile(file) {
    socket.emit('<%=conf.soc_msgs.uploadfile%>',file,function(data){
      if (data=="success"){
        changeUploadStatusView(file.filename,"upload_complete",0);
        sliceUploadTimer.stop();
        queTimer.start();
      } else {
        var sendStatus = 100 - (~~((slices.length / file.slice_cnt)*100));
        changeUploadStatusView(file.filename,"uploading",sendStatus);
      }
    });
  }

  // 一秒置きに 再生中ファイルの時間を送信
  sendCurrentTimeTimer = new mytools.timer(1000,function(){
    if (playlist.length != 0 && playlist[0].sessid == sessid && media != undefined){
      socket.emit('<%=conf.soc_msgs.sendcurrenttime%>', {value:media.currentTime});
    }
  });

  // ファイルDrop時の制御
  function handleFileSelect(e) {
    var file = null;
    var reader = new FileReader();
    var filename = null;

    e.stopPropagation();
    e.preventDefault();
    
    // 各ファイルをupload用のqueに登録
    files = e.dataTransfer.files;
    for(var i=0; i<files.length; i++){
      upload_que.push({file:files[i],filename:files[i].name});
    }
    queTimer.start();
  }

  // 送信用sliceque確認タイマー作成
  sliceUploadTimer = mytools.timer(500,function(){
    if (slices.length !=0 && uploading_flg){
      var reader = new FileReader();
      var seqno = slices[0].seqno;
      var filename = slices[0].filename;
      var end_flg = slices[0].end_flg;
      var file_type = slices[0].file_type;
      var slice_cnt = slices[0].slice_cnt;
      reader.onload = function(readed) {
        var data = readed.target.result;
        SendFile({
          data:data,
          seqno:seqno,
          filename:filename,
          end_flg:end_flg,
          filetype:file_type,
          slice_cnt:slice_cnt
        });
        slices.shift();
        if (slices.length == 0 ){
          upload_que.shift();
          uploading_flg = false;
        }
      }
      reader.readAsBinaryString(slices[0].data);
    }
  });
 

  // 送信中ファイルque確認タイマー作成
  queTimer = new mytools.timer(3000,function(){
    if( upload_que.length != 0 && !uploading_flg && !slice_uploading_flg){
      uploading_flg = true;
      queTimer.stop();
 
      var file = upload_que[0].file;
      var filename = upload_que[0].filename;

      // 正しいファイルタイプである場合は処理を行う
      if ( checkFileType(file.type) ){
        changeUploadStatusView(filename,"uploading",0);
        var filesize = file.size;
        var slice_cnt = ~~(filesize/slice_size)+1;
        for ( var i=0; i<slice_cnt; i++) {
          var end_flg = false;
          if (i==slice_cnt-1){
            end_flg = true;
          }
          slices.push({
            seqno:i,
             data:file.slice(i*slice_size,(i+1)*slice_size),
             filename:filename,
             end_flg:end_flg,
             file_type:file.type,
             slice_cnt:slice_cnt
          });
        }
        sliceUploadTimer.start();
      } else {
        changeUploadStatusView(filename,"denied",0);
        upload_que.shift();
        uploading_flg = false;
        queTimer.start();
      }
    } else if (upload_que.length == 0) {
      queTimer.stop();
    }
  });


  function checkFileType(filetype){
    for (var i=0; i<mime_types.length; i++){
      if (mime_types[i] == filetype){
        return true;
      }
    }
    return false;
  }

  function getAudioMimeTypes(){
    var audioArray= [
      <%for (var i=0; i<conf.mime_types.audio.length; i++){%>
        '<%=conf.mime_types.audio[i]%>',
      <%}%>
    ];
    return audioArray;
  }

  function getVideoMimeTypes(){
    var videoArray= [
      <%for (var i=0; i<conf.mime_types.video.length; i++){%>
        '<%=conf.mime_types.video[i]%>',
      <%}%>
    ];
    return videoArray;
  }


  // dropzoneの上をdragした場合の制御
  function handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'test';
  }

  // 表示名変更送信
  function changeName() {
    var newname = document.getElementById('newname').value
    socket.emit('<%=conf.soc_msgs.changename%>',newname);
  }

  // ファイル送信状況の表示
  function changeUploadStatusView(filename, st_flg, status) {
    var upload_status_view = document.getElementById('upload_status_view');
    view_str = "";
    if (st_flg=="uploading"){
      view_str = ' 『' + filename + '』 を設定中！ (' + status +'%)';
    } else if (st_flg=='upload_complete'){
      view_str = ' 『' + filename + '』 設定終了！ (100%)';
    }
    upload_status_view.style.fontSize = '16';
    upload_status_view.style.fontWeight = "bolder";
    upload_status_view.style.margin = '10px';
    upload_status_view.innerHTML = view_str;

    if (st_flg=='denied'){
      document.getElementById('upload_fails').innerHTML = '『' + filename +'』は対応していない形式です';
    }
  }

  // 名前変更のenterkeyでの処理
  function changeNameFromEnter(e) {
    if (e.keycode==13) {
      changeName();
    }
  }

  // documentのイベント作成
  var dropzone = document.getElementById('dropzone');
  dropzone.addEventListener("dragover",handleDragOver,false);
  dropzone.addEventListener("drop", handleFileSelect,false);
  document.getElementById("newname").addEventListener("keypress",changeNameFromEnter,false);
  document.getElementById("changename").addEventListener("click",changeName,false);
  document.getElementById("disconnect_btn").addEventListener("click",disConnect,false);
  document.getElementById("reconnect_btn").addEventListener("click",reConnect,false);


})();


</script>


