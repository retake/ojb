<!DOCTYPE html>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">


  // 変数宣言
  var uploading_flg = false;
  var upload_que = [];
  var sessid = null; 
  var playlist = [];
  var userlist = [];
  var playing_file_info = "";


  // audio初期化
  var audio = new Audio();
  audio.preload = 'metadata';
  audio.addEventListener("ended", function(e){
    if (playlist[0].sessid == sessid && playing_file_info=='player'){
      socket.emit('<%=conf.soc_msgs.playend%>', playlist[0]);
    }
  },false);;
  audio.addEventListener("loadedmetadata", function(e){
    if (playlist[0].sessid == sessid){
      playing_file_info = 'player';
      audio.play();
    } else {
      playing_file_info = 'listener';
      socket.emit('<%=conf.soc_msgs.getcurrenttime%>',{});
    }
    console.log(playing_file_info);
  }, false);


  // websocket接続開始
  var address = '<%=conf.address%>';
  var socket = io.connect(address);

   // 接続開始完了時の処理
  socket.on('<%=conf.soc_msgs.conn%>', function(msg) {
    console.log('<%=conf.soc_msgs.conn%>');
    sessid = socket.socket.transport.sessid;
    document.getElementById("name").value = sessid;
  });


  // 画面更新時の処理
  window.onbeforeunload = function(){
    disConnect();
  }

  // 切断時の処理
  function disConnect() {
    var yourname = getDispName(sessid);
    document.getElementById('name').innerHTML = '<font color=\'red\'><b>'+yourname+'</b></font> は死んでしまった！';
    if(audio!=undefined && audio.ended==false){
      audio.pause();
    }
    socket.disconnect({sessid:sessid});
    document.getElementById('disconnect_btn').style.display = "none";
    document.getElementById('reconnect_btn').style.display = "";
  }

  // 再接続時の処理
  function reConnect() {
   document.getElementById('disconnect_btn').style.display = "";
   document.getElementById('reconnect_btn').style.display = "none";
   // 再接続は、１度作ったsocketから行う。何故かは不明。
   socket.socket.connect(address);
  }

 // 再生停止通知受信時の処理
  socket.on('<%=conf.soc_msgs.playstop%>', function(data) {
    console.log('<%=conf.soc_msgs.playstop%>');
    audio.pause();
  });

  // 再生開始時の処理
  socket.on('<%=conf.soc_msgs.playstart%>', function(startTime) {
    console.log('<%=conf.soc_msgs.playstart%>');
    audio.src = './audiodata/'+playlist[0].filename;
    audio.load();
  });

  // 最新再生時刻受信時
  socket.on('<%=conf.soc_msgs.retcurrenttime%>', function(data) {
    console.log('<%=conf.soc_msgs.retcurrenttime%>');
    audio.currentTime = data;
    audio.play();
  });

  // プレイリスト更新通知受信時の処理
  socket.on('<%=conf.soc_msgs.updateplaylist%>', function(data) {
    console.log('<%=conf.soc_msgs.updateplaylist%>');
    playlist = data;
    createPlayListTable();
    createUserListTable();
  });

  // プレイリストテーブル最新化
  function createPlayListTable(){
    var playlist_elm = document.getElementById("playlist");
    var playlist_str = "";
    var filename = null;
    var color = null;
    var btn_sts = "";
    var no_width = 20;
    var id_width = 180;
    var filename_width = 200;
    var remove_width = 20;
    var playinfo_elm = document.getElementById('playinginfo');
    playinfo_elm.innerHTML = "";
    if (playlist.length>0) {
      playlist_str = '<table border=0 bgcolor="peachpuff">';
      playlist_str = playlist_str.concat('<caption>プレイリスト</caption>');
      playlist_str = playlist_str.concat('<tr>');
      playlist_str = playlist_str.concat('<th width='+no_width+'>no</th>');
      playlist_str = playlist_str.concat('<th width='+id_width+'>ID/name</th>');
      playlist_str = playlist_str.concat('<th width='+filename_width+'>filename</th>');
      playlist_str = playlist_str.concat('<th width='+remove_width+'>remove</th>');
      playlist_str = playlist_str.concat('</tr>');
      for (var i=0; i<playlist.length; i++){
        filename = playlist[i].filename;
        if (sessid == playlist[i].sessid) {
          color = "palegreen";
          btn_sts = "";
        } else {
          color = "paleturquoise";
          btn_sts = "disabled";
        }
        if (i==0){
          playinfo_elm.innerHTML = '再生中: <b>' + filename + '</b>';
        }
        playlist_str = playlist_str.concat('<tr bgcolor='+color+'>');
        playlist_str = playlist_str.concat('<td>'+(i+1)+'</td>');
        playlist_str = playlist_str.concat('<td>'+getDispName(playlist[i].sessid)+'</td>');
        playlist_str = playlist_str.concat('<td>'+filename+'</td>');
        playlist_str = playlist_str.concat('<td><input type=button value=\'削除\' onclick="removefile('+i+')" '+btn_sts+'/></td>');
        playlist_str = playlist_str.concat('</tr>');
      } 
      playlist_str = playlist_str.concat('</table>');
    }
    playlist_elm.innerHTML = playlist_str;
  }

  // ユーザーリストテーブル最新化
  function createUserListTable(){
    var userlist_elm = document.getElementById('userlist');
    var userlist_str = "";
    var no_width = 20;
    var id_width = 180;
    if (userlist.length>0) {
      userlist_str = '<table border=0 bgcolor="peachpuff">';
      userlist_str = userlist_str.concat('<caption>接続ユーザリスト<caption>');
      userlist_str = userlist_str.concat('<tr>');
      userlist_str = userlist_str.concat('<th width='+no_width+'>no</th>');
      userlist_str = userlist_str.concat('<th width='+id_width+'>ID/name</th>');
      userlist_str = userlist_str.concat('</tr>');
      for (var i=0; i<userlist.length; i++){
        var username = userlist[i].dispname;
        if (sessid == userlist[i].sessid) {
          color = "palegreen";
        } else {
          color = "paleturquoise";
        }
        userlist_str = userlist_str.concat('<tr bgcolor="'+color+'">');
        userlist_str = userlist_str.concat('<td>'+(i+1)+'</td>');
        userlist_str = userlist_str.concat('<td>'+username+'</td>');
        userlist_str = userlist_str.concat('</tr>');
      } 
      userlist_str = userlist_str.concat('</table>');
    }
    userlist_elm.innerHTML = userlist_str;
  }

  // ユーザーリスト受信時の処理
  socket.on('<%=conf.soc_msgs.updateuserlist%>',function(newuserlist){
    userlist = newuserlist;
    var yourname = getDispName(sessid);
    document.getElementById('name').innerHTML = 'よくぞまいった <font color=\'red\'><b>'+yourname+'</b></font> よ！';
    createPlayListTable();
    createUserListTable();
  });

  // セッションIDから表示名を取得
  function getDispName(srcid){
    var dispname = "";
    for (var i=0; i<userlist.length; i++){
      if (srcid == userlist[i].sessid){
        dispname = userlist[i].dispname;
        break;
      }
    }
    return dispname;
  }

  // ファイル削除通知送信
  function removefile(fileno) {
    socket.emit('<%=conf.soc_msgs.removefile%>',{filename:playlist[fileno].filename});
  }

  // ファイル送信
  function SendFile(file) {
    socket.emit('<%=conf.soc_msgs.uploadfile%>',file,function(data){
      if (data=="success"){
        uploading_flg = false;
        changeUploadStatusView(file.name,"upload_complete");
      }
    });
  }

  // 一秒置きに 再生中ファイルの時間を送信
  setInterval( function(){
    if (playlist.length != 0 && playlist[0].sessid == sessid && audio != undefined){
      socket.emit('<%=conf.soc_msgs.sendcurrenttime%>', {value:audio.currentTime});
    }
  },1000);


  // ファイルDrop時の制御
  function handleFileSelect(e) {
    var file = null;
    var reader = new FileReader();
    var filename = null;

    e.stopPropagation();
    e.preventDefault();
    
    // 各ファイルをupload用のqueに登録
    files = e.dataTransfer.files;
    for(var i=0; i<files.length; i++){
      upload_que.push({file:files[i],filename:files[i].name});
    }
  }

  // 3秒に1度、送信中のファイルが無ければupload用queの中身を送る
  setInterval(function(){
    if( upload_que.length !=0 && uploading_flg == false){
      uploading_flg = true;
      var reader = new FileReader();
      var file = upload_que[0].file;
      var filename = upload_que[0].filename;
      changeUploadStatusView(filename,"uploading");
      reader.onload = function(readed) {
        SendFile({file:readed.target.result, name:filename});
        upload_que.shift();
      }
      reader.readAsBinaryString(file);
    }
  },3000);

  // dropzoneの上をdragした場合の制御
  function handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'test';
  }

  // 表示名変更送信
  function changeName() {
    var newname = document.getElementById('newname').value
    socket.emit('<%=conf.soc_msgs.changename%>',newname);
  }

  // ファイル送信状況の表示
  function changeUploadStatusView(filename,st_flg) {
    var upload_status_view = document.getElementById('upload_status_view');
    view_str = "";
    if (st_flg=="uploading"){
      view_str = '<font size="14"><b> 『' + filename + '』 を設定中！</b></font>';
    } else {
      view_str = '<font size="14"><b> 『' + filename + '』 設定完了！</b></font>';
    }
    upload_status_view.innerHTML = view_str;
  }
  

  // 名前変更のenterkeyでの処理
  function changeNameFromEnter(keycode) {
    if (keycode==13) {
      changeName();
    }
  }

</script>


<html>
  <head>
    <meta charset="UTF-8">
    <title><%= title %></title>
   <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div style="background-color:gray" id="drop_zone" ondrop="handleFileSelect(event)" ondragover="handleDragOver(event)">
      <font size=32 color="white">追加したいファイルをドロップ</font>
      <div id='upload_status_view'></div>
    </div>
    <br>
    <div id="name"></div>
    <br>
    <div id="playinginfo"></div>
    <br>
    <div id="playlist"></div>
    <br>
    <div id="userlist"></div>
    <br>
    <input type="text" id="newname" onkeypress="changeNameFromEnter(event.keyCode);" />
    <input type="button" value="名前を変更" onclick="changeName();" />
    <input type="button" id="disconnect_btn" value="切断" style="display:" onclick="disConnect();" />
    <input type="button" id="reconnect_btn" value="再接続" style="display:none" onclick="reConnect();" />
    <div id="receiveMsg"></div>
  </body>
</html>

